package handler

import (
	"database/sql"
	"errors"
	"log/slog"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) Start(m *tgbotapi.Message) {
	message := tgbotapi.NewMessage(
		m.From.ID,
		"–ü—Ä–∏–≤–µ—Ç! üëã\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –±–æ—Ç—É —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ–≤—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑–Ω—ã—Ö –±—É–º–∞–≥.\n\n/help - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
	)
	_, err := h.bot.Send(message)
	if err != nil {
		slog.Error("send message error", slog.String("error", err.Error()))
		return
	}
	return
}

func (h *Handler) Help(m *tgbotapi.Message) {
	message := tgbotapi.NewMessage(
		m.From.ID,
		"/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n/unRegister - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
	)
	_, err := h.bot.Send(message)
	if err != nil {
		slog.Error("send message error", slog.String("error", err.Error()))
		return
	}
	return
}

func (h *Handler) Register(m *tgbotapi.Message) {
	id := m.From.ID
	_, err := h.service.GetUserById(int(id))
	responseMessage := ""

	defer h.handleResponse(&responseMessage, err, id)

	if errors.Is(err, sql.ErrNoRows) {
		err = h.service.Register(int(id))
		if err == nil {
			responseMessage = "–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! üéâ"
		}
	} else if err == nil {
		responseMessage = "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ü§®"
	}
}

func (h *Handler) handleResponse(text *string, err error, id int64){
	if err != nil {
		slog.Error("send message error", slog.String("error", err.Error()))
		*text = "–û—à–∏–±–∫–∞. üòî"
	}
	message := tgbotapi.NewMessage(
		id,
		*text,
	)
	_, err = h.bot.Send(message)
	if err != nil {
		slog.Error("send message error", slog.String("error", err.Error()))
	}
}
