package handler

import (
	"database/sql"
	"errors"
	"fmt"
	"log/slog"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/modaniru/moex-telegram-bot/internal/entity"
	"github.com/modaniru/moex-telegram-bot/internal/service/services"
)

func (h *Handler) Start(m *tgbotapi.Message) {
	text := "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –±–æ—Ç—É —Ç—ã —Å–º–æ–∂–µ—à—å –≤–æ–≤—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑–Ω—ã—Ö –±—É–º–∞–≥.\n\n/help - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
	h.handleResponse(text, nil, m.From.ID)
}

func (h *Handler) Help(m *tgbotapi.Message) {
	text := "/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n/unRegister - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç."
	h.handleResponse(text, nil, m.From.ID)
}

func (h *Handler) Register(m *tgbotapi.Message) {
	id := m.From.ID
	_, err := h.service.GetUserById(int(id))
	responseMessage := ""

	defer func() { h.handleResponse(responseMessage, err, id) }()

	if errors.Is(err, sql.ErrNoRows) {
		err = h.service.Register(int(id))
		if err == nil {
			responseMessage = "–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! üéâ"
		}
	} else if err == nil {
		responseMessage = "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. ü§®"
	}
}

func (h *Handler) AddSecurity(m *tgbotapi.Message) {
	// add engine market boardGroup security baseDate coefficient
	id := m.From.ID
	message := m.Text
	args := strings.Split(message, " ")
	if len(args) < 7 {
		h.handleResponse("–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! üö´", nil, id)
		return
	} else if len(args) > 7 {
		h.handleResponse("C–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! üö´", nil, id)
		return
	}
	bgId, err := strconv.Atoi(args[3])
	if err != nil {
		h.handleResponse("boardgroup –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º! üîü", nil, id)
		return
	}
	coefficent, err := strconv.ParseFloat(args[6], 64)
	if err != nil {
		h.handleResponse("coefficient –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º/–¥—Ä–æ–±–Ω—ã–º —á–∏—Å–ª–æ–º! üîü", nil, id)
		return
	}
	// TODO return security and median struct
	resp, err := h.service.TrackService.SaveTrack(&entity.SaveTrack{
		UserId:       int(id),
		Engine:       args[1],
		Market:       args[2],
		BoardGroupId: bgId,
		Security:     args[4],
		Date:         args[5],
		Interval:     10,
		Coefficient:  coefficent,
	})
	if err != nil {
		if errors.Is(err, services.ErrBadDay) {
			h.handleResponse("–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—Ä–≥–∏ –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–ª–∏—Å—å! üïü", nil, id)
			return
		}
		h.handleResponse("", err, id)
		return
	}
	respMessage := fmt.Sprintf("–¢—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª –±—É–º–∞–≥—É %s, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç volume %d, –º—ã —Ç–µ–±—è —É–≤–µ–¥–æ–º–∏–º! üëÄ\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π volume(10 min): %d\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π volume(10 min): %d\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –¥–∞—Ç–∞: %s", resp.Security, resp.Median, resp.MaxVolume, resp.MinVolume, resp.Date)
	h.handleResponse(respMessage, nil, id)
}

func (h *Handler) FollowUser(m *tgbotapi.Message) {
	id := m.From.ID
	u, err := h.service.GetUserById(int(id))
	message := ""

	defer func() {
		h.handleResponse(message, err, id)
	}()

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! üò¢"
			err = nil
		}
		return
	}
	if u.Followed == true {
		message = "–¢—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å! üôÉ"
		return
	}
	err = h.service.FollowUser(int(id))

	message = "–¢—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! üòé"
}

func (h *Handler) UnfollowUser(m *tgbotapi.Message) {
	id := m.From.ID
	u, err := h.service.GetUserById(int(id))
	message := ""

	defer func() {
		h.handleResponse(message, err, id)
	}()

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! üò¢"
			err = nil
		}
		return
	}
	if u.Followed == false {
		message = "–¢—ã —É–∂–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å! üôÉ"
		return
	}
	err = h.service.UnfollowUser(int(id))

	message = "–¢—ã –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞! üò™"
}

// middleware that validate user
func (h *Handler) isValidUser(m *tgbotapi.Message, next func(*tgbotapi.Message)) {
	id := m.From.ID
	_, err := h.service.GetUserById(int(id))
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			h.handleResponse("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üò≤", nil, id)
			return
		}
		h.handleResponse("", err, id)
	} else {
		next(m)
	}
}

// Send message to user based in error
func (h *Handler) handleResponse(text string, err error, id int64) {
	if err != nil {
		slog.Error("send message error", slog.String("error", err.Error()))
		text = "–û—à–∏–±–∫–∞. üòî"
	}
	message := tgbotapi.NewMessage(
		id,
		text,
	)
	_, err = h.bot.Send(message)
	if err != nil {
		slog.Error("send message error", slog.String("error", err.Error()))
	}
}
